#!/bin/sh -e

# Dependencies
MUSL_version=musl-1.2.0
LINUX_version=linux-5.4.24
LLVM_version=llvm-10
TOYBOX_version=toybox-HEAD
CMAKE_version=cmake-3.16.5
AWK_version=awk-HEAD
SBASE_version=sbase-HEAD
VIM_version=vim-8.2.0347
BEARSSL_version=bearssl-HEAD
CURL_version=curl-7.69.0
BYACC_version=byacc-20191125
CURSES_version=netbsd-curses-HEAD
ZLIB_version=zlib-1.2.11
SAMURAI_version=samurai-HEAD
GETTEXT_version=gettext-tiny-HEAD
ZSH_version=zsh-5.8
GIT_version=git-2.25.1
DASH_version=dash-0.5.10
PYTHON_version=Python-3.8.2

# GPL Dependencies
GNUMAKE_version=make-3.81
GNUBASH_version=bash-3.2.57
RSYNC_version=rsync-2.6.9

check()
{
  if ! type "$1" > /dev/null; then
    echo "ERROR: $1 not found in path!"
    exit 1
  fi
}

check curl
check git
check find
check cmp

check clang
check clang++
check ar
check ranlib
check lld

check make
check cmake
check bash
check nproc

projects='$sysroot/tmp musl byacc clang cmake awk sbase toybox curl make cacert zlib vim samurai gettext git zsh'

if ! type "ccache" > /dev/null; then
  HOST_CC=clang
  HOST_CXX=clang++
  LLVM_CCACHE_BUILD=OFF
else
  HOST_CC='ccache clang'
  HOST_CXX='ccache clang++'
  LLVM_CCACHE_BUILD=ON
fi

CURL_headers=$PWD/out-$CURL_version/include
CURL_lib=$PWD/out-$CURL_version/lib
CURSES_headers=$PWD/out-$CURSES_version/include
CURSES_lib=$PWD/out-$CURSES_version/lib
BEARSSL_headers=$PWD/$BEARSSL_version/inc
BEARSSL_lib=$PWD/out-$BEARSSL_version
ZLIB_headers=$PWD/out-$ZLIB_version/include
ZLIB_lib=$PWD/out-$ZLIB_version/lib
LINUX_headers=$PWD/$LINUX_version/usr/include
SYSROOT=$PWD/sysroot
HOSTROOT=$PWD/build-host-$LLVM_version
MARCH=broadwell
NPROC=$(nproc)
LLVM_TBLGEN=$PWD/build-host-$llvm/bin/llvm-tblgen
CLANG_TBLGEN=$PWD/build-host-$llvm/bin/clang-tblgen
CFLAGS="-Os -pipe -march=$MARCH -mtune=$MARCH"
CXXFLAGS="-Os -pipe -march=$MARCH -mtune=$MARCH"
LDFLAGS="-w -s"

if ! test -f "build.ninja"; then
  echo "Creating build.ninja"
  touch build.ninja
  echo "# Autogenerated Configuration" >> build.ninja
  echo "#============================" >> build.ninja
  echo "musl=$MUSL_version" >> build.ninja
  echo "linux=$LINUX_version" >> build.ninja
  echo "llvm=$LLVM_version" >> build.ninja
  echo "toybox=$TOYBOX_version" >> build.ninja
  echo "cmake=$CMAKE_version" >> build.ninja
  echo "awk=$AWK_version" >> build.ninja
  echo "sbase=$SBASE_version" >> build.ninja
  echo "vim=$VIM_version" >> build.ninja
  echo "bearssl=$BEARSSL_version" >> build.ninja
  echo "bearssl-headers=$BEARSSL_headers" >> build.ninja
  echo "bearssl-lib=$BEARSSL_lib" >> build.ninja
  echo "curl=$CURL_version" >> build.ninja
  echo "curl-headers=$CURL_headers" >> build.ninja
  echo "curl-lib=$CURL_lib" >> build.ninja
  echo "byacc=$BYACC_version" >> build.ninja
  echo "curses=$CURSES_version" >> build.ninja
  echo "curses-headers=$CURSES_headers" >> build.ninja
  echo "curses-lib=$CURSES_lib" >> build.ninja
  echo "zlib=$ZLIB_version" >> build.ninja
  echo "zlib-headers=$ZLIB_headers" >> build.ninja
  echo "zlib-lib=$ZLIB_lib" >> build.ninja
  echo "gettext=$GETTEXT_version" >> build.ninja
  echo "host-msgfmt=$PWD/host-$GETTEXT_version/bin/msgfmt" >> build.ninja
  echo "zsh=$ZSH_version" >> build.ninja
  echo "git=$GIT_version" >> build.ninja
  echo "samurai=$SAMURAI_version" >> build.ninja
  echo "dash=$DASH_version" >> build.ninja
  echo "python=$PYTHON_version" >> build.ninja
  echo "host-python=$PWD/host-$PYTHON_version/bin/python3" >> build.ninja
  echo "gnumake=$GNUMAKE_version" >> build.ninja
  echo "host-make=$PWD/host-$GNUMAKE_version/bin/make" >> build.ninja
  echo "gnubash=$GNUBASH_version" >> build.ninja
  echo "rsync=$RSYNC_version" >> build.ninja
  echo "sysroot=$SYSROOT" >> build.ninja
  echo "march=$MARCH" >> build.ninja
  echo "nproc=$NPROC" >> build.ninja
  echo "llvm_ccache_build=$LLVM_CCACHE_BUILD" >> build.ninja
  echo "host_cc=$HOST_CC" >> build.ninja
  echo "host_cxx=$HOST_CXX" >> build.ninja
  echo "cc=$SYSROOT/bin/clang" >> build.ninja
  echo "cxx=$SYSROOT/bin/clang++" >> build.ninja
  echo "yacc=$SYSROOT/bin/yacc" >> build.ninja
  echo "llvm-tblgen=$HOSTROOT/bin/llvm-tblgen" >> build.ninja
  echo "clang-tblgen=$HOSTROOT/bin/clang-tblgen" >> build.ninja
  echo "linux-headers=$LINUX_headers" >> build.ninja
  echo "cflags=$CFLAGS" >> build.ninja
  echo "cxxflags=$CXXFLAGS" >> build.ninja
  echo "ldflags=$LDFLAGS" >> build.ninja
fi

echo '' >> build.ninja

echo '# Default build rules' >> build.ninja
echo '#####################' >> build.ninja
echo 'include rules.ninja' >> build.ninja

echo '' >> build.ninja

find -name build.ninja | sed '/^.\/build.ninja.*$/d' | cut -c3- | xargs -n1 echo subninja >> build.ninja

echo '' >> build.ninja

echo '# Default clean tasks' >> build.ninja
echo '#####################' >> build.ninja
echo 'build clean: rm' >> build.ninja
echo '  rm = src-* build-* out-* host-* sysroot *.tgz *.log' >> build.ninja

echo '' >> build.ninja

echo 'build distclean: rm' >> build.ninja
echo '  rm = src-* build-* out-* host-* sysroot *.tgz *.log build.ninja $' >> build.ninja
echo '    $musl $gnumake $linux $byacc $clang $llvm $cmake $awk $sbase $toybox $' >> build.ninja
echo '    $bearssl $curl $curses $zlib $vim $samurai $gettext $git $zsh $python' >> build.ninja

echo '' >> build.ninja

echo '# Default builds' >> build.ninja
echo '################' >> build.ninja
echo 'build $sysroot/tmp: mkdir' >> build.ninja

echo '' >> build.ninja

echo "build sysroot.tgz: package | $projects" >> build.ninja
echo '  builddir = $sysroot' >> build.ninja

echo '' >> build.ninja

echo 'default sysroot.tgz' >> build.ninja
