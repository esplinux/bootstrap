#!/bin/sh -e

if test -f "build.ninja"; then
 echo 'Already Configured'
 exit 0
fi

# Manual Dependencies
BEARSSL_version=bearssl-HEAD
BYACC_version=byacc-20191125
CMAKE_version=cmake-3.16.5
CURL_version=curl-7.69.0
CURSES_version=netbsd-curses-HEAD
GETTEXT_version=gettext-tiny-HEAD
LINUX_version=linux-5.4.24
LLVM_version=llvm-10
PYTHON_version=Python-3.8.2
ZLIB_version=zlib-1.2.11

# GPL Dependencies
MAKE_version=make-3.81

check()
{
  if ! type "$1" > /dev/null; then
    echo "ERROR: $1 not found in path!"
    exit 1
  fi
}

check curl
check git
check find
check cmp

check clang
check clang++
check ar
check ranlib
check lld

check nproc

PACKAGES=$(find . -name build.ninja | cut -c3-)

echo "Creating build.ninja"

touch build.ninja
printf "%s\n" '# Autogenerated Configuration' >> build.ninja
printf "%s\n" '#============================' >> build.ninja

for PACKAGE in $PACKAGES;
do
  NAME=$(grep '^NAME=' "$PACKAGE"| cut -d '=' -f 2-)
  VERSION=$(grep '^VERSION=' "$PACKAGE"| cut -d '=' -f 2-)
  KEY=$(printf %s "$NAME" | tr '[:upper:]' '[:lower:]')
  VALUE="$NAME-$VERSION"
  printf '%s=%s\n' "$KEY" "$VALUE" >> build.ninja
done

projects="\$sysroot/tmp musl clang awk sbase toybox curl cacert samurai git zsh less nvi"

if ! type "ccache" > /dev/null; then
  HOST_CC=clang
  HOST_CXX=clang++
  LLVM_CCACHE_BUILD=OFF
else
  HOST_CC='ccache clang'
  HOST_CXX='ccache clang++'
  LLVM_CCACHE_BUILD=ON
fi

CURL_headers=$PWD/target-$CURL_version/include
CURL_lib=$PWD/target-$CURL_version/lib
CURSES_headers=$PWD/target-$CURSES_version/include
CURSES_lib=$PWD/target-$CURSES_version/lib
BEARSSL_headers=$PWD/target-$BEARSSL_version/include
BEARSSL_lib=$PWD/target-$BEARSSL_version/lib
ZLIB_headers=$PWD/target-$ZLIB_version/include
ZLIB_lib=$PWD/target-$ZLIB_version/lib
LINUX_headers=$PWD/$LINUX_version/usr/include

SYSROOT=$PWD/sysroot
HOSTROOT=$PWD/build-host-$LLVM_version
MARCH=broadwell
NPROC=$(nproc)
CFLAGS="-Os -pipe -march=$MARCH -mtune=$MARCH"
CXXFLAGS="-Os -pipe -march=$MARCH -mtune=$MARCH"
LDFLAGS="-w -s"

# Test for LIBC++
tmp_out=$(mktemp /tmp/test-XXXXXX)
clang++ -x c++ -o "$tmp_out" - << EOF
#include <iostream>
int main(int argc, char* argv[]) {
  #ifdef _LIBCPP_VERSION
    std::cout << _LIBCPP_VERSION << std::endl;
  #endif
  return 0;
}
EOF

LIBCPP_VERSION=$($tmp_out)
rm "$tmp_out"

if [ -z "$LIBCPP_VERSION" ]; then
  LLVM_SYSROOT=$SYSROOT
else
  LLVM_SYSROOT='/'
fi

cat << EOF >> build.ninja

host-cmake=$PWD/host-$CMAKE_version/bin/cmake
host-yacc=$PWD/host-$BYACC_version/bin/yacc
host-msgfmt=$PWD/host-$GETTEXT_version/bin/msgfmt
host-python=$PWD/host-$PYTHON_version/bin/python3
host-make=$PWD/host-$MAKE_version/bin/make

bearssl-headers=$BEARSSL_headers
bearssl-lib=$BEARSSL_lib
curl-headers=$CURL_headers
curl-lib=$CURL_lib
netbsd-curses-headers=$CURSES_headers
netbsd-curses-lib=$CURSES_lib
zlib-headers=$ZLIB_headers
zlib-lib=$ZLIB_lib

sysroot=$SYSROOT
llvm-sysroot=$LLVM_SYSROOT
march=$MARCH
nproc=$NPROC
llvm_ccache_build=$LLVM_CCACHE_BUILD
host_cc=$HOST_CC
host_cxx=$HOST_CXX
cc=$SYSROOT/bin/clang
cxx=$SYSROOT/bin/clang++
llvm-tblgen=$HOSTROOT/bin/llvm-tblgen
clang-tblgen=$HOSTROOT/bin/clang-tblgen
linux-headers=$LINUX_headers
cflags=$CFLAGS
cxxflags=$CXXFLAGS
ldflags=$LDFLAGS

# Default build rules
#####################
include rules.ninja

EOF

#find . -name build.ninja | sed '/^.\/build.ninja.*$/d' | cut -c3- | xargs -n1 echo subninja >> build.ninja
for PACKAGE in $PACKAGES;
do
  printf "subninja %s\n" "$PACKAGE" >> build.ninja
done

cat << EOF >> build.ninja

# Default clean tasks
#####################
build clean: rm
  rm = src-* build-* target-* host-* sysroot *.tgz *.log

build distclean: rm
  rm = src-* build-* target-* host-* sysroot *.tgz *.log build.ninja $
    \$musl \$linux \$byacc \$clang \$llvm \$cmake \$awk \$sbase \$toybox $
    \$bearssl \$curl \$zlib \$samurai \$gettext-tiny \$git \$zsh \$python i$
    \$nvi \$less \$netbsd-curses \$make

# Default builds
################
build \$sysroot/tmp: mkdir

build sysroot.tgz: package | $projects
  builddir = \$sysroot

default sysroot.tgz
EOF
